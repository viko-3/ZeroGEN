from torch.utils.data import DataLoaderfrom tape import mainfrom tape.models.modeling_bert import ProteinBertForMaskedLM, ProteinBertModel, ProteinBertConfigimport torchimport torch.nn as nnfrom tape.datasets import ProteinDataSetclass Protein_Model(nn.Module):    def __init__(self, pretrained_model_name_or_path):        super().__init__()        assert pretrained_model_name_or_path is not None        self.model = self.load_pretrain(pretrained_model_name_or_path)    def load_pretrain(self, pretrained_model_name_or_path):        model = ProteinBertModel.from_pretrained(pretrained_model_name_or_path)        return model    def forward(self, idx, input_mask=None,                targets=None):        out = self.model(idx, input_mask)        return outif __name__ == '__main__':    path = '/home/s2136015/Code/TransVAE/ProteinLM/tape/models/out'    model = ProteinBertModel.from_pretrained(path)  # Protein_Model(path)    data_path = '/home/s2136015/Code/TransVAE/ProteinLM/tape/data/pfam/pfam_valid.lmdb'    dataSet = ProteinDataSet(data_path)    loader = DataLoader(        dataSet,        num_workers=2,        collate_fn=dataSet.collate_fn,        batch_size=2  # type: ignore    )    for step, batch in enumerate(loader):        res = model(batch['input_ids'], batch['input_mask'])        print(res[1].shape)        print()        exit()
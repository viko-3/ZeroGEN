import argparseimport osimport sysimport torchimport rdkitfrom DeepTarget.script_utils import add_train_args, read_smiles_csv, set_seed, read_proteins_csvfrom DeepTarget.models_storage import ModelsStoragelg = rdkit.RDLogger.logger()lg.setLevel(rdkit.RDLogger.CRITICAL)MODELS = ModelsStorage()def get_parser():    parser = argparse.ArgumentParser()    parser.add_argument('--proteins_path', type=str,                        help='proteins_path')    parser.add_argument('--gen_savepath', type=str, default='data/gen_res.csv',                        help='gen_savepath')    parser.add_argument('--sample_num', type=int, default=1,                        help='sample_num')    parser.add_argument('--checkpoint_path', type=str,                        help='checkpoint_path')    parser.add_argument('--load_config_path', type=str,                        help='checkpoint_path')    parser.add_argument('--load_vocab_path', type=str,                        help='vocab_path')    parser.add_argument('--test_pretrain_Language_model', type=bool, default=False,                        help='test_pretrain_Language_model')    return parserdef load_config(parser_config):    config = torch.load(parser_config.load_config_path)    config.proteins_path = parser_config.proteins_path    config.gen_savepath = parser_config.gen_savepath    config.sample_num = parser_config.sample_num    config.checkpoint_path = parser_config.checkpoint_path    config.vocab_load = parser_config.load_vocab_path    config.test_pretrain_Language_model = parser_config.test_pretrain_Language_model    return configdef main(model, config):    set_seed(config.seed)    device = torch.device(config.device)    # For CUDNN to work properly    if device.type.startswith('cuda'):        torch.cuda.set_device(device.index or 0)    gen_data = read_proteins_csv(config.proteins_path)    vocab = torch.load(config.vocab_load)    model_state = torch.load(config.checkpoint_path)    trainer = MODELS.get_model_trainer(model)(config)    model = MODELS.get_model_class(model)(vocab, config).to(device)    model.load_state_dict(model_state)    trainer.sample(model, gen_data)if __name__ == '__main__':    parser = get_parser()    config = parser.parse_args()    config = load_config(config)    model = 'DeepTarget'    main(model, config)
import argparseimport osimport sysimport torchimport rdkitfrom DeepTarget.script_utils import add_train_args, read_smiles_csv, set_seedfrom DeepTarget.models_storage import ModelsStoragefrom DeepTarget.dataset import get_datasetlg = rdkit.RDLogger.logger()lg.setLevel(rdkit.RDLogger.CRITICAL)MODELS = ModelsStorage()def get_parser():    parser = argparse.ArgumentParser()    parser.add_argument('--bootstrap_path', type=str,                        help='bootstrap_path')    parser.add_argument('--bootstrap_savepath', type=str, default='data/bootstrap_res.csv',                        help='bootstrap_savepath')    parser.add_argument('--bootstrap_threshold', type=float, default=0.8,                        help='bootstrap_threshold')    parser.add_argument('--checkpoint_path', type=str,                        help='checkpoint_path')    parser.add_argument('--load_config_path', type=str,                        help='checkpoint_path')    parser.add_argument('--load_vocab_path', type=str,                        help='vocab_path')    return parserdef load_config(parser_config):    config = torch.load(parser_config.load_config_path)    config.bootstrap_path = parser_config.bootstrap_path    config.bootstrap_savepath = parser_config.bootstrap_savepath    config.bootstrap_threshold = parser_config.bootstrap_threshold    config.checkpoint_path = parser_config.checkpoint_path    config.vocab_load = parser_config.load_vocab_path    return configdef main(model, config):    set_seed(config.seed)    device = torch.device(config.device)    # For CUDNN to work properly    if device.type.startswith('cuda'):        torch.cuda.set_device(device.index or 0)    bootstrap_data_smi, bootstrap_data_prot, bootstrap_data_mol_idx, bootstrap_data_prot_idx = read_smiles_csv(        config.bootstrap_path)    vocab = torch.load(config.vocab_load)    trainer = MODELS.get_model_trainer(model)(config)    model = MODELS.get_model_class(model)(vocab, config).to(device)    train_data = [bootstrap_data_smi, bootstrap_data_prot, bootstrap_data_mol_idx, bootstrap_data_prot_idx]    trainer._bootstrap(model, train_data)if __name__ == '__main__':    parser = get_parser()    config = parser.parse_args()    config = load_config(config)    model = 'DeepTarget'    main(model, config)
import argparseimport osimport sysimport torchimport rdkitfrom DeepTarget.script_utils import add_train_args, read_smiles_csv, set_seedfrom DeepTarget.models_storage import ModelsStoragefrom DeepTarget.dataset import get_datasetlg = rdkit.RDLogger.logger()lg.setLevel(rdkit.RDLogger.CRITICAL)MODELS = ModelsStorage()def get_parser():    parser = argparse.ArgumentParser()    subparsers = parser.add_subparsers(        title='Models trainer script', description='available models'    )    for model in MODELS.get_model_names():        add_train_args(            MODELS.get_model_train_parser(model)(                subparsers.add_parser(model)            )        )    return parserdef main(model, config):    set_seed(config.seed)    device = torch.device(config.device)    # For CUDNN to work properly    if device.type.startswith('cuda'):        torch.cuda.set_device(device.index or 0)    bootstrap_data_smi, bootstrap_data_prot, bootstrap_data_mol_idx, bootstrap_data_prot_idx = read_smiles_csv(        config.bootstrap_path)    trainer = MODELS.get_model_trainer(model)(config)    vocab = torch.load(config.vocab_load)    model = MODELS.get_model_class(model)(vocab, config).to(device)    train_data = [bootstrap_data_smi, bootstrap_data_prot, bootstrap_data_mol_idx, bootstrap_data_prot_idx]    trainer._bootstrap(model, train_data)if __name__ == '__main__':    parser = get_parser()    config = parser.parse_args()    model = sys.argv[1]    main(model, config)